<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>전파고양이</title>
    <link>/</link>
    <description>Recent content on 전파고양이</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 07 Dec 2022 00:00:00 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Emacs-lisp 자료형</title>
      <link>/post/emacs/emacs-lisp-datatype/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0900</pubDate>
      
      <guid>/post/emacs/emacs-lisp-datatype/</guid>
      <description>출력하기 print(&amp;#34;이렇게 출력합니다&amp;#34;) (message &amp;#34;이렇게 출력합니다&amp;#34;) 이렇게 출력합니다 emacslisp-배워보기 표현식 이해하기 리스트 형태의 표현식이 계산될 때 좌에서 우로 계산 되며 첫번째 원소는 함수의 정의로 나머지 원소는 인자들로 계산된 후 함수를 호출하게 된다. 호출된 함수가 리턴하는 값을 그 표현식의 값(value)라고 부른다.
(message &amp;#34;hello workd&amp;#34;) hello workd (message &amp;#34;hello: %d&amp;#34; (+ 1 2)) hello: 3 메시지는 &amp;ldquo;hello: %&amp;ldquo;와 3을 argument로 받아 실핵된다.
심벌 이해하기 자신의 그대로 값으로 계산되지 않은 message + 를 심벌이라고 부른다.</description>
    </item>
    
    <item>
      <title>SICP :: 설치방법(MacOs)</title>
      <link>/post/lisp/sicp-install/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/lisp/sicp-install/</guid>
      <description>우선 brew로 Racket을 설정하고 racket에서 제공하는 SCHEME BatteryPack을 설치한다.
brew install --cask racket raco pkg install sicp racket-mode 설정 emacs에서 문제를 풀기위해서 Paredit과 racket-mode를 설치하고 ob-racket을 설치한다.
(use-package racket-mode :config (add-hook &amp;#39;racket-mode-hook (lambda () define-key racket-mode-map (kbd &amp;#34;&amp;lt;f5&amp;gt;&amp;#34;) &amp;#39;racket-run) ) ) (use-package paredit :ensure t :config (dolist (m &amp;#39;(emacs-lisp-mode-hook racket-mode-hook racket-repl-mode-hook)) (add-hook m #&amp;#39;paredit-mode)) (bind-keys :map paredit-mode-map (&amp;#34;{&amp;#34; . paredit-open-curly) (&amp;#34;}&amp;#34; . paredit-close-curly) ) (unless terminal-frame (bind-keys :map paredit-mode-map (&amp;#34;M-[&amp;#34; .</description>
    </item>
    
    <item>
      <title>@angular/cli와 같은 At(@)이 포함된 package 이름은 왜 그럴까?</title>
      <link>/post/javascript/what-is-js-package-at/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/javascript/what-is-js-package-at/</guid>
      <description>When you sign up for an npm user account or create an Org, you are granted a scope that matches your user or Org name. You can use this scope as a namespace for related packages. A scope allows you to create a package with the same name as a package created by another user or Org without conflict.
  당신이 NPM user 계정을 만들거나, org를 만들면 사용자 또는 org이름과 일치된 scope가 제공된다.</description>
    </item>
    
    <item>
      <title>ytd-dl</title>
      <link>/post/etc/how-to-youtube-download/</link>
      <pubDate>Sat, 19 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/etc/how-to-youtube-download/</guid>
      <description>macos 설치 방법
# homebrew로 설치하기 brew install yt-dlp/taps/ytldp 아래와 같이 -F {URL} 옵션을 이용하면 다운로드 가능한 포맷을 얻을 수 있다.
yt-dlp -F https://www.youtube.com/watch?v=kPTvTnKqXRY 만약에 내가 여기서 Mp3만 얻고 싶다면 아래와 같이 &amp;ndash;audio-format mp3 -x {url}을 사용하면 된다.
yt-dlp --audio-format mp3 -x https://www.youtube.com/watch\?v\=kPTvTnKqXRY </description>
    </item>
    
    <item>
      <title>Racket 설치 및 emacs 개발 환경</title>
      <link>/post/lisp/setup-racket-env/</link>
      <pubDate>Fri, 18 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/lisp/setup-racket-env/</guid>
      <description>https://docs.racket-lang.org/pollen/Installation.html
아래와 같이 환경변수를 bashprofile에 추가.
export PATH=&amp;quot;/Applications/Racket v{설치한 라켓의 버전}/bin:$PATH&amp;quot;
emacs 설정 (use-package racket-mode :config (add-hook &amp;#39;racket-mode-hook (lambda () define-key racket-mode-map (kbd &amp;#34;&amp;lt;f5&amp;gt;&amp;#34;) &amp;#39;racket-run) ) ) (use-package paredit :ensure t :config (dolist (m &amp;#39;(emacs-lisp-mode-hook racket-mode-hook racket-repl-mode-hook)) (add-hook m #&amp;#39;paredit-mode)) (bind-keys :map paredit-mode-map (&amp;#34;{&amp;#34; . paredit-open-curly) (&amp;#34;}&amp;#34; . paredit-close-curly)) (unless terminal-frame (bind-keys :map paredit-mode-map (&amp;#34;M-[&amp;#34; . paredit-wrap-square) (&amp;#34;M-{&amp;#34; . paredit-wrap-curly)))) (provide &amp;#39;init-racket) racket file을 생성하고 아래와 같이 작성한 뒤에 F5를 눌렀을 때 잘 되면 문제 없음</description>
    </item>
    
    <item>
      <title>finalcut :: 자막 편집 워크 플로우</title>
      <link>/post/etc/finalcut_workflow_caption/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/etc/finalcut_workflow_caption/</guid>
      <description>finalcut :: 영상에 자막 넣기 caption    file &amp;gt; import &amp;gt; caption  자막 편집하기   이 상태에서 Ctrl + shift + c를 입력하면
  와 같이 자막 편집 창이 뜹니다. 그리고 편집하고 ESC키를 입력하면 창이 닫히면서 편집을 이어갈 수 있습니다. 이걸 끝까지 반복하면 됩니다.</description>
    </item>
    
    <item>
      <title>Generic Recursive Type Bound 이해하기(Item30)</title>
      <link>/post/java/effective_item_30/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/java/effective_item_30/</guid>
      <description>문제 상황을 이해하기 위해서 다음과 같은 문제를 풀어 보자
interface Fruite { Integer getSize(); } // apple.java  class Apple implements Fruit, Comparable&amp;lt;Apple&amp;gt; { private final Integer size; public Apple(Integer size) { this.size = size; } @Override public Integer getSize() { return size; } @Override public int compareTo(Apple other) { return size.compareTo(other.size); } } // orange.java  class Orange implements Fruit, Comparable&amp;lt;Orange&amp;gt; { private final Integer size; public Orange(Integer size) { this.</description>
    </item>
    
    <item>
      <title>Hugo :: 정적 블로깅 방법</title>
      <link>/post/hugo_use_static_blog/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/hugo_use_static_blog/</guid>
      <description>설치 방법 brew install hugo 디렉토리 구조 만들기  hugo new site {blog_name} git submodule add -b master https://github.com/karohani/karohani.github.com/ public git submodule add https://github.com/budparr/gohugo-theme-ananke.git  google에서 사이트가 검색 되도록 하기  Google Search Console에 SiteMap에 등록  https://www.google.com/webmasters 파일을 다운 받은 뒤에 static 폴더 안에 넣고 검증 버튼을 누르면 완료된다.    DONEHugo Directory 구조 설명 The following is a high-level overview of each of the directories with links to each of their respective sections within the Hugo docs.</description>
    </item>
    
    <item>
      <title>Emacs Lisp 이해하기</title>
      <link>/post/emacs/emacs-lisp-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 12 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/emacs/emacs-lisp-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</guid>
      <description>출력해보기 String 다루는 방법에 대해서 설명하라, 2가지 함수 string &amp;lt;-&amp;gt; int join-string regex memq progn org-add-link-type sort-lines Emacs Lisp Functions  buffer  display-buffer display-buffer-at-buttom display-buffer-no-window Overriding the default placement actions display-buffer-alist emacs-lisp으로 이것저것 {{c1::dfasdfasdlfij}}      출력해보기 M-x ielm
(message &amp;#34;하이 %d&amp;#34; (+ 2 3)) #&amp;#39;(1 2 3) (cons 1 &amp;#39;(2 3 4)) ;; (1 2 3 4) (let ((a 2) (b 3)) (message &amp;#34;%s&amp;#34; (+ a b)) ) (let (a b) (setq a 2) (setq b 3) (message &amp;#34;%s&amp;#34; (+ a b)) ) ;; (message a) // let은 local variable ;; (let ((a 2) (b 3) (c (+ a b)))) // error 심볼은 각각 평가 되므로 초기화 단계에서 서로 참조 불가 (let* ((a 2) (b 2) (c (+ a b))) (message &amp;#34;%s&amp;#34; (+ a b c)) ) String 다루는 방법에 대해서 설명하라, 2가지 함수 (split-string &amp;#34;123123 123123 123123&amp;#34; &amp;#34; &amp;#34;) ;; (&amp;#34;123123&amp;#34; &amp;#34;123123&amp;#34; &amp;#34;123123&amp;#34; (concat &amp;#34;a&amp;#34; &amp;#34;b&amp;#34;) string &amp;lt;-&amp;gt; int join-string regex memq (memq 1 &amp;#39;(7 1 2 3)) (memq ELT LIST)로 정의 되어 있고, ELT가 LIST의 엘리먼트라면 non-nil을 반환한다.</description>
    </item>
    
    <item>
      <title>clojure :: 환경 설정</title>
      <link>/post/clojure/clojure_dev_env/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/clojure/clojure_dev_env/</guid>
      <description>환경 설정 brew install clojure/tools/clojure </description>
    </item>
    
    <item>
      <title>javascript의 object literal</title>
      <link>/post/javascript/object_liternal/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/javascript/object_liternal/</guid>
      <description>literal이란 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는 표기법이다. {}로 0개 이상의 property를 선어하면 변수 할당 시점에 객체리터럴을 해석해 객체를 할당한다. 객체 리터럴은 expression이므로 &amp;lt;;&amp;gt;가 필요하다. block과는 다르다.  var person = { name: &amp;#39;LEE&amp;#39;, age: 20 }  &amp;lt;name: &amp;lsquo;LEE&amp;rsquo;&amp;gt;, &amp;lt;age: 20&amp;gt;를 프로퍼티라 부른다. name은 property의 키, &amp;lsquo;LEE&amp;rsquo;는 프로퍼티의 값이다.  Property  key에 문자열이나 심벌이외의 값 =&amp;gt; 문자열로 변환 Access  dot notation bracket notation   키가 숫자로 이루어진 문자열의 경우 따옴표를 생략해도 암시적으로 변환된다.</description>
    </item>
    
    <item>
      <title>연구 체계 및 방법론</title>
      <link>/post/etc/note_taking_rules/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0900</pubDate>
      
      <guid>/post/etc/note_taking_rules/</guid>
      <description>zettelkasten  개념적인 내용들만 기록한다. 프로젝트성이나 아직까지 개념화되지 않는 내용들은 project에 작성하고 주기적으로 옮겨준다.  note taking process &amp;lt;2021-07-30 Fri&amp;gt;챕터를 읽고 이해한 내용을 손으로 우선 써본다. 떠오르는 생각들이 있으면 함께 메모해서 적어둔다. Reference Note 작성이 끝나면 다음으로는 영구노트 작성으로 넘어간다. 내가 잘 아는 내용들은 상관 없지만 모르는 내용들은 이 Reference Note를 종이로 작성하는게 더 좋다. 왜냐면 마치 설명하듯이 작성하게 되는 이점이 있으니까.
내가 쓰는 도구들 볼펜 볼트액션 볼펜 현재는 tactile turn에서 나오는 티타늄 볼트액션 볼펜을 이용하고 있다.</description>
    </item>
    
    <item>
      <title>19장 타입파라미터</title>
      <link>/post/emacs/pis-19-typeparameter/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0900</pubDate>
      
      <guid>/post/emacs/pis-19-typeparameter/</guid>
      <description>subtype이란 무엇인가? F가 G의 서브타입이라면 G가 쓰일 자리에 F가 쓰여도 된다.
In programming language theory, subtyping (also subtype polymorphism or inclusion polymorphism) is a form of type polymorphism in which a subtype is a datatype that is related to another datatype (the supertype) by some notion of substitutability, meaning that program elements, typically subroutines or functions, written to operate on elements of the supertype can also operate on elements of the subtype.</description>
    </item>
    
    <item>
      <title>python virtualenv 환경정리</title>
      <link>/post/python/python-environment/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0900</pubDate>
      
      <guid>/post/python/python-environment/</guid>
      <description>pyenv 설치 brew install pyenv virtualenv 사용하기 가상환경 생성하기  virtualenv {환경이름} 위의 경로를 생성하면 환경이름으로 된 폴더가 만들어짐  $ virtualenv venv 활성화 시키기 source {환경이름}/bin/activate를 입력하면 shell의 모양이 다음과 같이 바뀜
(환경이름) $ 내가 사용하는 모듈을 저장하기 pip freeze &amp;gt; requirements.txt
내가 사용하는 모듈 설치하기 pip install -r requirements.txt
virtualEnvWrapper 설정하기 virutalenv만 사용하면 매번 source를 통해서 가상환경에 진입해야 한다.
pip install virtualenvwrapper # ~/.zsrc에 아래를 등록 export WORKON_HOME=~/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=&amp;#34;$(which python3)&amp;#34; # Usage of python3 source /Users/veritas/.</description>
    </item>
    
    <item>
      <title>개인적으로 사용하는 emacs 설정 모음</title>
      <link>/post/emacs/emacs/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0900</pubDate>
      
      <guid>/post/emacs/emacs/</guid>
      <description>Index
  Related:
  emacs main inbox  emacs-my-package emacs-lisp-배워보기 emacs-documentation  emacs-yasnippet Snippet collections can be stored in plain text files. They are arranged by sub-directories naming snippet tables. These mostly name Emacs major mode names. 기본적으로 Emacs major Mode의 네임으로 subdir을 만들어서 관리한다.
Triggering Expansion   link
  when yas-minor-mode is active 일 때 triggering key를 누르면 확장 된다.
  Writting Snippet emacs-my-package 내가 사용하는 package를 모아서 정리</description>
    </item>
    
    <item>
      <title>6장 AOP</title>
      <link>/post/java/toby-spring-chapter-6/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>/post/java/toby-spring-chapter-6/</guid>
      <description>Proxy, ProxyPattern, DecoratorPattern Decorator Pattern   다른 언어와의 차이점
  자바의 함수는 1급 객체가 아니다.
    Example1 Input Stream 자바에서 Decorator패턴을 구현하기 위해서는 결국 Proxy의 형태로 구현할 수 밖에 없다. 자바는 함수가 1급 객체가 아니기 때문이다.
  Figure 1: BufferedInputStream 예제
  핵심 기능과 부가기능을 분리하는 여러가지 방법들 </description>
    </item>
    
    <item>
      <title>java-junit</title>
      <link>/post/java/java-junit/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>/post/java/java-junit/</guid>
      <description>java-junit  link   용어정리 JUnit 기본 단언문  특징 단언문 Hamcrest 대표적인 Matchers      Index
  Related:
  java-junit sitename test
link  github-team-junit  용어정리  test context 테스트의 정의  반복적으로 수행되고 동일한 결과를 얻어야 함   테스트케이스에서 사용하는 인스턴스 파일이나 네트워크 등의 자원을 만들어서 지정 데이터베이스 연동  JUnit 기본 단언문  assertEqual: 두개의 값이 같은지 비교 assertSame: 두 개의 객체가 정말 동일한 객체인지 확인 assertTrue: 예상 값의 참 거짓을 판별 asserNull: 대상 값이 null이면 참이 됨 fail  특징 fixture  @BeforeClass @AfterClass @Before @After  테스트 종류  시간 제한 테스트  @Test(timeout=1000)   테스트 무시  @Ignore   배열지원 @RunWith  JUnit Test 클래스를 실행하기 위해서 Runner명시적으로 지정   @Suiteclasses(Class[])  여러개의 테스트 클래스를 수행하기 위해서 쓰임 @RunWith(Suite.</description>
    </item>
    
    <item>
      <title>emacs 스크롤을 pixcel 단위로 변경하기</title>
      <link>/post/emacs/emacs-scroll-pixel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/emacs/emacs-scroll-pixel/</guid>
      <description> 아래와 같이 설정해주면 inline 이미지에서 스크롤시 점프하지 않는다.  ;; https://emacs.stackexchange.com/questions/10354/smooth-mouse-scroll-for-inline-images (pixel-scroll-mode) (setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour. (setq pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels). (setq mouse-wheel-scroll-amount &amp;#39;(1)) ; Distance in pixel-resolution to scroll each mouse wheel event. (setq mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me. </description>
    </item>
    
    <item>
      <title>hugo를 사용한 정적 블로깅</title>
      <link>/post/essay/how-to-make-static-blog-by-using-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/essay/how-to-make-static-blog-by-using-hugo/</guid>
      <description>설치 brew install hugo 디렉토리 구조 만들기  hugo new site {blog_name} theme추가  git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke git submodule add -b master https://github.com/karohani/karohani.github.com public    google에서 사이트가 검색 되도록 하기 Google Search Console에 SiteMap등록  google webmaster 파일을 다운 받은 뒤에 static폴더 안에 넣고 검증 버튼을 누르면 완료된다.  OX-hugo를 이용해서 실제 데이터와 바인딩하기 주의점 파일 이름이 한글이면 제대로 출력되지 않는다.  TITLE은 한글로 하더라도 파일이름은 한글로 해서는 안된다 ㅠㅠ 젠장  </description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>/post/javascript/javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript/javascript/</guid>
      <description>Index 자바스크립트 이해하기 자바스크립트의 Closure 성질 이해하기 Closure는 왜 생기는 거지? 자바스크립트 배열 이해하기 index로 값 가져오기 var array = [1, 2, 3, 4]; array[2] // return 3 값 할당하는 방법 front 자바스크립트에서 배열에 값을 추가적으로 할당하거나 변경하라
back var array = [1,2,3,4]; array[2] = &amp;#34;abcd&amp;#34; 길이 array.length를 통해서 배열의 길이를 얻을 수 있다.
끝에 추가하기 array.push(10을 통해서 값을 획득할 수 있다. 반환값은 추가된 마지막 배열의 위치 index이다.
var array = [1, 2, 3, 4]; array.</description>
    </item>
    
    <item>
      <title>mysql-troubleshooting</title>
      <link>/post/mysql/mysql_troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/mysql/mysql_troubleshooting/</guid>
      <description>MySQL to_base64 함수는 개행을 추가한다.  아래의 동작을 기본으로 하기 때문에 주의! JSON String을 암호화 하고 복호화 할 때 이슈가 발생한다.  https://dev.mysql.com/doc/refman/8.0/en/string-functions.html
  </description>
    </item>
    
    <item>
      <title>Zettelkasten(상자방법)을 이용한 효과적인 공부방법</title>
      <link>/post/essay/201022-1143-zettelkasten/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/essay/201022-1143-zettelkasten/</guid>
      <description>생각을 기록하면 이렇게 된다 최고의 모드는 orgmode이다.
하지만 최대한 다른 모드와 기능들은 배제하고 내가 직접 작성한 것들만 사용하고 싶다. 그러면 역시 orgmode와 이것을 조합한게 최고인듯? &amp;lt;201022-1143-zettelkasten.org&amp;gt;
핵심 원리  언제든지 찾을 수 있는 unique-id system backlink를 통한 생각의 정리와 조합 카드에는 하나의 아이디어만 있어야 함 (원자성) 각각의 카드를 다른 아이디어와 링크시키기  Reference  뉴스 기사 dpitt.me Using Emacs&amp;rsquo;s org-mode As Your Zettelkasten Org-mode Workflow Part 3: Zettelkasten with Org-mode · Jethro Kuan  </description>
    </item>
    
    <item>
      <title>개발자가 갖추어야 할 9가지 기술 - 박종천 넥슨 부본부장</title>
      <link>/post/etc/20210724211747-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EA%B0%96%EC%B6%94%EC%96%B4%EC%95%BC-%ED%95%A0-9%EA%B0%80%EC%A7%80-%EA%B8%B0%EC%88%A0%EC%97%90%EC%84%9C.../</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/etc/20210724211747-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EA%B0%96%EC%B6%94%EC%96%B4%EC%95%BC-%ED%95%A0-9%EA%B0%80%EC%A7%80-%EA%B8%B0%EC%88%A0%EC%97%90%EC%84%9C.../</guid>
      <description>엔지니어는 실패를 막는 사람이다. [2021-07-24 Sat 21:17]https://www.youtube.com/watch?v=fHyTA-UIcqs</description>
    </item>
    
    <item>
      <title>이규원 현실 세상의 TDD 후기</title>
      <link>/post/lecture-note/20210811214554-%E1%84%92%E1%85%A7%E1%86%AB%E1%84%89%E1%85%B5%E1%86%AF%E1%84%89%E1%85%A6%E1%84%89%E1%85%A1%E1%86%BC%E1%84%8B%E1%85%B4-tdd-%E1%84%90%E1%85%A6%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3-%E1%84%8C%E1%85%AE%E1%84%83%E1%85%A9-%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B4-%E1%84%80%E1%85%B5%E1%87%81%E1%84%8B%E1%85%B3%E1%86%AB%E1%84%80%E1%85%A9%E1%86%BA-%E1%84%8B%E1%85%B5%E1%84%80%E1%85%B2%E1%84%8B%E1%85%AF%E1%86%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/lecture-note/20210811214554-%E1%84%92%E1%85%A7%E1%86%AB%E1%84%89%E1%85%B5%E1%86%AF%E1%84%89%E1%85%A6%E1%84%89%E1%85%A1%E1%86%BC%E1%84%8B%E1%85%B4-tdd-%E1%84%90%E1%85%A6%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3-%E1%84%8C%E1%85%AE%E1%84%83%E1%85%A9-%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B4-%E1%84%80%E1%85%B5%E1%87%81%E1%84%8B%E1%85%B3%E1%86%AB%E1%84%80%E1%85%A9%E1%86%BA-%E1%84%8B%E1%85%B5%E1%84%80%E1%85%B2%E1%84%8B%E1%85%AF%E1%86%AB/</guid>
      <description>엔지니어링의 깊은 곳 [2021-08-11 Wed 21:45]    추상화라는 것은 대상의 가지고 있는 것중에 일부분만 투영하는 것
  협력과 계약
 대부분의 코드는 다른 코드와 협력 협력에 필요한 것은 어떻게가 아니라 무엇이다.  누가 담당해서 어떤 과정을 통해서 처리하는 것은 우리에게 중요한 문제가 아니다.   인터페이스  무엇을 표현한다. 협력하는 코드사이의 계약 추상화의 결과이다.      우리는 인터페이스를 대상으로 프로그래밍을 한다. 내용을 고려하지 않는다. print가 어떤 과정을 통해서 이루어지는지는 고려사항이 아니다.</description>
    </item>
    
    <item>
      <title>정리 방법</title>
      <link>/post/life_hacking/%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%B5_%E1%84%87%E1%85%A1%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/life_hacking/%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%B5_%E1%84%87%E1%85%A1%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8/</guid>
      <description>책장 정리 방법1  기계인간님의 정리 방법을 참고로 했다.     3 3 3 1      - 1 1    - 2 MRU    - 3     - 3 버릴책     어딘가에서 꺼내서 읽은 책은 MRU 제일 왼쪽에 꽂는다. MRU가 다 차면 이동한다. 다시 사용할 것 같은 책은 2로 이동한다(주로 글쓰기) 버릴 책의 공간이 전부 차면 &amp;ldquo;중고&amp;quot;로 판매하던 없앤다.</description>
    </item>
    
  </channel>
</rss>
