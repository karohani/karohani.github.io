[{"content":"출력하기 print(\u0026#34;이렇게 출력합니다\u0026#34;) (message \u0026#34;이렇게 출력합니다\u0026#34;) 이렇게 출력합니다 emacslisp-배워보기 표현식 이해하기 리스트 형태의 표현식이 계산될 때 좌에서 우로 계산 되며 첫번째 원소는 함수의 정의로 나머지 원소는 인자들로 계산된 후 함수를 호출하게 된다. 호출된 함수가 리턴하는 값을 그 표현식의 값(value)라고 부른다.\n(message \u0026#34;hello workd\u0026#34;) hello workd (message \u0026#34;hello: %d\u0026#34; (+ 1 2)) hello: 3 메시지는 \u0026ldquo;hello: %\u0026ldquo;와 3을 argument로 받아 실핵된다.\n심벌 이해하기 자신의 그대로 값으로 계산되지 않은 message + 를 심벌이라고 부른다. 이들은 쓰여진 위치에 따라 할당된 함수나 값으로 계산된다.\n(message \u0026#34;withd %d\u0026#34; fill-column) withd 70 심벌은 리스트 형태의 표현식에 첫 번째 원소의 위치로 쓰였을 때 함수로 계산된다. 그 외의는 전부 값으로 계산된다.\n\u0026#39;(message \u0026#34;width %d\u0026#34; fill-column) ; (message \u0026#34;width %d\u0026#34; fill-column) message width %d fill-column 위와 \u0026lsquo;가 붙으면 리스트 그 자체가 리턴된다. \u0026lsquo;를 리스트의 형태의 표현식에 적용한다는 것은 각 원소에 \u0026lsquo;를 적용하고 그 심벌들을 다시 리스트로 만드는 것을 의미한다.\n리스트 cons (cons 1 2) (1 . 2) cdr (car (cons 1 2)) 1 car (cdr (cons 1 (cons 3 4))) (3 . 4) cons 구조에 대한 설명 위와 같은 cons의 구조는 linked list와 동일한 구조의 형태를 가지게 된다. cons의 오른쪽 박스가 다른 cons의 구조를 가리키게 되면서 여러개의 cons를 묶을 수 있게 된다.\n(cons 1 (cons 2 (cons 3 nil ))) 1 2 3 ()는 nil을 표현한다. 이것을 특별히 nil로 동일하게 나타낸다.\n(cons 1 (cons 2 nil)) (list 1 2 3) 1 2 3 ","permalink":"/post/emacs/emacs-lisp-datatype/","summary":"출력하기 print(\u0026#34;이렇게 출력합니다\u0026#34;) (message \u0026#34;이렇게 출력합니다\u0026#34;) 이렇게 출력합니다 emacslisp-배워보기 표현식 이해하기 리스트 형태의 표현식이 계산될 때 좌에서 우로 계산 되며 첫번째 원소는 함수의 정의로 나머지 원소는 인자들로 계산된 후 함수를 호출하게 된다. 호출된 함수가 리턴하는 값을 그 표현식의 값(value)라고 부른다.\n(message \u0026#34;hello workd\u0026#34;) hello workd (message \u0026#34;hello: %d\u0026#34; (+ 1 2)) hello: 3 메시지는 \u0026ldquo;hello: %\u0026ldquo;와 3을 argument로 받아 실핵된다.\n심벌 이해하기 자신의 그대로 값으로 계산되지 않은 message + 를 심벌이라고 부른다.","title":"Emacs-lisp 자료형"},{"content":" When you sign up for an npm user account or create an Org, you are granted a scope that matches your user or Org name. You can use this scope as a namespace for related packages. A scope allows you to create a package with the same name as a package created by another user or Org without conflict.\n당신이 NPM user 계정을 만들거나, org를 만들면 사용자 또는 org이름과 일치된 scope가 제공된다. 이 scope를 패키지의 네임스페이스로 활용할 수 있다. Scope를 사용하면 충돌 없이 다른 사용자 또는 조직에서 만든 패키지와 동일한 이름의 패키지를 만들 수 있다.\n대충 인증된 organization을 말하는거구나.\nstackoverflow ","permalink":"/post/javascript/what-is-js-package-at/","summary":"When you sign up for an npm user account or create an Org, you are granted a scope that matches your user or Org name. You can use this scope as a namespace for related packages. A scope allows you to create a package with the same name as a package created by another user or Org without conflict.\n당신이 NPM user 계정을 만들거나, org를 만들면 사용자 또는 org이름과 일치된 scope가 제공된다.","title":"@angular/cli와 같은 At(@)이 포함된 package 이름은 왜 그럴까?"},{"content":"macos 설치 방법\n# homebrew로 설치하기 brew install yt-dlp/taps/ytldp 아래와 같이 -F {URL} 옵션을 이용하면 다운로드 가능한 포맷을 얻을 수 있다.\nyt-dlp -F https://www.youtube.com/watch?v=kPTvTnKqXRY 만약에 내가 여기서 Mp3만 얻고 싶다면 아래와 같이 \u0026ndash;audio-format mp3 -x {url}을 사용하면 된다.\nyt-dlp --audio-format mp3 -x https://www.youtube.com/watch\\?v\\=kPTvTnKqXRY ","permalink":"/post/etc/how-to-youtube-download/","summary":"macos 설치 방법\n# homebrew로 설치하기 brew install yt-dlp/taps/ytldp 아래와 같이 -F {URL} 옵션을 이용하면 다운로드 가능한 포맷을 얻을 수 있다.\nyt-dlp -F https://www.youtube.com/watch?v=kPTvTnKqXRY 만약에 내가 여기서 Mp3만 얻고 싶다면 아래와 같이 \u0026ndash;audio-format mp3 -x {url}을 사용하면 된다.\nyt-dlp --audio-format mp3 -x https://www.youtube.com/watch\\?v\\=kPTvTnKqXRY ","title":"ytd-dl"},{"content":"https://docs.racket-lang.org/pollen/Installation.html\n아래와 같이 환경변수를 bashprofile에 추가.\nexport PATH=\u0026quot;/Applications/Racket v{설치한 라켓의 버전}/bin:$PATH\u0026quot;\nemacs 설정 (use-package racket-mode :config (add-hook \u0026#39;racket-mode-hook (lambda () define-key racket-mode-map (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;) \u0026#39;racket-run) ) ) (use-package paredit :ensure t :config (dolist (m \u0026#39;(emacs-lisp-mode-hook racket-mode-hook racket-repl-mode-hook)) (add-hook m #\u0026#39;paredit-mode)) (bind-keys :map paredit-mode-map (\u0026#34;{\u0026#34; . paredit-open-curly) (\u0026#34;}\u0026#34; . paredit-close-curly)) (unless terminal-frame (bind-keys :map paredit-mode-map (\u0026#34;M-[\u0026#34; . paredit-wrap-square) (\u0026#34;M-{\u0026#34; . paredit-wrap-curly)))) (provide \u0026#39;init-racket) racket file을 생성하고 아래와 같이 작성한 뒤에 F5를 눌렀을 때 잘 되면 문제 없음\n(* 1 2) 그냥 실행하면 아래와 같은 이슈가 발생함.\ndefault-load-handler: expected a `module\u0026rsquo; declaration, but found something else\n이 때는 파일 최상단에 #lang racket을 추가해주면 된다.\n#lang racket (* 1 2) 아래와 같이 F5를 눌렀을 때 정상적으로 출력된다면 Racket을 위한 준비과정은 완료 된다.\n","permalink":"/post/lisp/setup-racket-env/","summary":"https://docs.racket-lang.org/pollen/Installation.html\n아래와 같이 환경변수를 bashprofile에 추가.\nexport PATH=\u0026quot;/Applications/Racket v{설치한 라켓의 버전}/bin:$PATH\u0026quot;\nemacs 설정 (use-package racket-mode :config (add-hook \u0026#39;racket-mode-hook (lambda () define-key racket-mode-map (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;) \u0026#39;racket-run) ) ) (use-package paredit :ensure t :config (dolist (m \u0026#39;(emacs-lisp-mode-hook racket-mode-hook racket-repl-mode-hook)) (add-hook m #\u0026#39;paredit-mode)) (bind-keys :map paredit-mode-map (\u0026#34;{\u0026#34; . paredit-open-curly) (\u0026#34;}\u0026#34; . paredit-close-curly)) (unless terminal-frame (bind-keys :map paredit-mode-map (\u0026#34;M-[\u0026#34; . paredit-wrap-square) (\u0026#34;M-{\u0026#34; . paredit-wrap-curly)))) (provide \u0026#39;init-racket) racket file을 생성하고 아래와 같이 작성한 뒤에 F5를 눌렀을 때 잘 되면 문제 없음","title":"Racket 설치 및 emacs 개발 환경"},{"content":"finalcut :: 영상에 자막 넣기 caption file \u0026gt; import \u0026gt; caption 자막 편집하기 이 상태에서 Ctrl + shift + c를 입력하면\n와 같이 자막 편집 창이 뜹니다. 그리고 편집하고 ESC키를 입력하면 창이 닫히면서 편집을 이어갈 수 있습니다. 이걸 끝까지 반복하면 됩니다.\n","permalink":"/post/etc/finalcut_workflow_caption/","summary":"finalcut :: 영상에 자막 넣기 caption file \u0026gt; import \u0026gt; caption 자막 편집하기 이 상태에서 Ctrl + shift + c를 입력하면\n와 같이 자막 편집 창이 뜹니다. 그리고 편집하고 ESC키를 입력하면 창이 닫히면서 편집을 이어갈 수 있습니다. 이걸 끝까지 반복하면 됩니다.","title":"finalcut :: 자막 편집 워크 플로우"},{"content":"문제 상황을 이해하기 위해서 다음과 같은 문제를 풀어 보자\ninterface Fruite { Integer getSize(); } // apple.java class Apple implements Fruit, Comparable\u0026lt;Apple\u0026gt; { private final Integer size; public Apple(Integer size) { this.size = size; } @Override public Integer getSize() { return size; } @Override public int compareTo(Apple other) { return size.compareTo(other.size); } } // orange.java class Orange implements Fruit, Comparable\u0026lt;Orange\u0026gt; { private final Integer size; public Orange(Integer size) { this.size = size; } @Override public Integer getSize() { return size; } @Override public int compareTo(Orange other) { return size.compareTo(other.size); } } //main.java class Main { public static void main(String[] args) { Apple apple1 = new Apple(3); Apple apple2 = new Apple(4); apple1.compareTo(apple2); Orange orange1 = new Orange(3); Orange orange2 = new Orange(4); orange1.compareTo(orange2); apple1.compareTo(orange1); // Error: different types } } 일단 우선 위의 예제에서는 compareTo라는 함수가 중복된다. 이렇게 되면 Fruit를 상속받는 모든 클래스가 이 compareTo를 Implement하는 문제가 생긴다. 이걸 수정하기 위해서 다음과 같이 해보자\nCommon 클래스로 중복 옮기기 class Fruit implements Comparable\u0026lt;Fruit\u0026gt; { private final Integer size; public Fruit(Integer size) { this.size = size; } public Integer getSize() { return size; } @Override public int compareTo(Fruit other) { return size.compareTo(other.getSize()); } } class Apple extends Fruit { public Apple(Integer size) { super(size); } } class Orange extends Fruit { public Orange(Integer size) { super(size); } } CompareTo를 Common class로 추출해서 위와 같이 작성하면 쉽게 구현체를 만들 수 있다. 이 코드가 자바라서 class를 사용했지만 java8에서는 default Method가 지원되서 interface를 이용해도 가능하다.\n이 때 문제점은 두개의 서로 다른 타입을 비교 했을 때 에러가나지 않는다는 점이다. 우리는 서로 다른 타입을 비교하면 에러가 나기를 원한다.\napple1.compareTo(orange1); // No error 이 때 사용되는 것이 바로 타입 파라미터이다.\nclass Fruit\u0026lt;T\u0026gt; implements Comparable\u0026lt;T\u0026gt; { private final Integer size; public Fruit(Integer size) { this.size = size; } public Integer getSize() { return size; } @Override public int compareTo(T other) { return size.compareTo(other.getSize()); // Error: getSize() not available. } } 그런데 Fruit에 타입 파라미터를 추가하니 T의 메서드인 getSize()는 컴파일러가 알 수 없다. 왜냐면 우리의 클래스 Fruit클래스의 타입파라미터 T는 어떠한 Bound도 없기 때문이다. 그래서 T는 어떠한 클래스도 될 수 있으며, 모든 클래스가 getSize()를 가질 수도 없다.\n이때 도입되는 것이 Recursive Type Bound이다.\nclass Fruit\u0026lt;T extends Fruit\u0026lt;T\u0026gt;\u0026gt; implements Comparable\u0026lt;T\u0026gt; { private final Integer size; public Fruit(Integer size) { this.size = size; } public Integer getSize() { return size; } @Override public int compareTo(T other) { return size.compareTo(other.getSize()); // Now getSize() is available. } } class Apple extends Fruit\u0026lt;Apple\u0026gt; { public Apple(Integer size) { super(size); } } class Orange extends Fruit\u0026lt;Orange\u0026gt; { public Orange(Integer size) { super(size); } } 우선 컴파일러에게 이 T가 Fruit를 상속 받은 T라는 것을 말해주자. 다른 말로 Upper bound가 \u0026ldquo;T extends Fruit\u0026lt;T\u0026gt;\u0026ldquo;라는 뜻이 된다.\n이것은 오로지 Fruit의 SubType만이 Type Argument로 사용될 수 있음을 뜻한다.\n모든 문제가 해결 되었을까?\n아니다. 이 패턴에는 함정이 하나 있다. 컴파일러는 다른 서브타입에 대한 Type argument를 막지 못한다. 예를 들어보자.\nclass Orange extends Fruit\u0026lt;Orange\u0026gt; {} class Apple extends Fruit\u0026lt;Orange\u0026gt; {} // no compile error 이 문제를 스칼라에서는 self:E라는 것을 통해서 풀어본다고 하는데 어떻게 하는지 나중에 살펴보자\n","permalink":"/post/java/effective_item_30/","summary":"문제 상황을 이해하기 위해서 다음과 같은 문제를 풀어 보자\ninterface Fruite { Integer getSize(); } // apple.java class Apple implements Fruit, Comparable\u0026lt;Apple\u0026gt; { private final Integer size; public Apple(Integer size) { this.size = size; } @Override public Integer getSize() { return size; } @Override public int compareTo(Apple other) { return size.compareTo(other.size); } } // orange.java class Orange implements Fruit, Comparable\u0026lt;Orange\u0026gt; { private final Integer size; public Orange(Integer size) { this.size = size; } @Override public Integer getSize() { return size; } @Override public int compareTo(Orange other) { return size.","title":"Generic Recursive Type Bound 이해하기(Item30)"},{"content":"설치 방법 brew install hugo 디렉토리 구조 만들기 hugo new site {blog_name} git submodule add -b master https://github.com/karohani/karohani.github.com/ public git submodule add https://github.com/budparr/gohugo-theme-ananke.git google에서 사이트가 검색 되도록 하기 Google Search Console에 SiteMap에 등록 https://www.google.com/webmasters 파일을 다운 받은 뒤에 static 폴더 안에 넣고 검증 버튼을 누르면 완료된다. DONE Hugo Directory 구조 설명 The following is a high-level overview of each of the directories with links to each of their respective sections within the Hugo docs.\narchetypes\nYou can create new content files in Hugo using the hugo new command. By default, Hugo will create new content files with at least date, title (inferred from the filename), and draft = true. This saves time and promotes consistency for sites using multiple content types. You can create your own archetypes with custom preconfigured front matter fields as well. assets\nStores all the files which need be processed by Hugo Pipes. Only the files whose .Permalink or .RelPermalink are used will be published to the public directory. Note: assets directory is not created by default. config\nHugo ships with a large number of configuration directives. The config directory is where those directives are stored as JSON, YAML, or TOML files. Every root setting object can stand as its own file and structured by environments. Projects with minimal settings and no need for environment awareness can use a single config.toml file at its root. Many sites may need little to no configuration, but Hugo ships with a large number of configuration directives for more granular directions on how you want Hugo to build your website. Note: config directory is not created by default. content\nAll content for your website will live inside this directory. Each top-level folder in Hugo is considered a content section. For example, if your site has three main sections—blog, articles, and tutorials—you will have three directories at content/blog, content/articles, and content/tutorials. Hugo uses sections to assign default content types.\n모든 컨텐츠는 이 곳에 저장됩니다. 각 최고 레벨의 폴더는 휴고에서 Content-Section으로 관리됩니다. 예를 들면 당신이 3개의 메인 섹션이 있다면 여기에 폴더를 3개 만들면 됩니다.\ndata\nThis directory is used to store configuration files that can be used by Hugo when generating your website. You can write these files in YAML, JSON, or TOML format. In addition to the files you add to this folder, you can also create data templates that pull from dynamic content. layouts\nStores templates in the form of .html files that specify how views of your content will be rendered into a static website. Templates include list pages, your homepage, taxonomy templates, partials, single page templates, and more. static\nStores all the static content: images, CSS, JavaScript, etc. When Hugo builds your site, all assets inside your static directory are copied over as-is. A good example of using the static folder is for verifying site ownership on Google Search Console, where you want Hugo to copy over a complete HTML file without modifying its content. From Hugo 0.31 you can have multiple static directories. resources\nCaches some files to speed up generation. Can be also used by template authors to distribute built Sass files, so you don’t have to have the preprocessor installed. Note: resources directory is not created by default. OX-HUGO를 이용해서 ORGMODE에서 글을 작성하기 아래와 같이 Heading에서 EXPORT_FILE_NAME에 \u0026ldquo;XXX.md\u0026quot;와 EXPORT_DATE의 2022-11-10과 같이 입력한다.\n:PROPERTIES: :EXPORT_FILE_NAME: OBJECT_LITERNAL.md :EXPORT_DATE: 2022-11-10 :END: 제일 상단에 Category를 다음과 같이 Property를 입력한다. 여기서 주의할 점은 \u0026ldquo;EXPORT_FILE_NAME\u0026quot;에서 한글 이름을 사용하면 링크에 문제가 생길 수 있다는 점이다. 주의해서 영문명으로만 사용하도록 하자.\n","permalink":"/post/hugo_use_static_blog/","summary":"설치 방법 brew install hugo 디렉토리 구조 만들기 hugo new site {blog_name} git submodule add -b master https://github.com/karohani/karohani.github.com/ public git submodule add https://github.com/budparr/gohugo-theme-ananke.git google에서 사이트가 검색 되도록 하기 Google Search Console에 SiteMap에 등록 https://www.google.com/webmasters 파일을 다운 받은 뒤에 static 폴더 안에 넣고 검증 버튼을 누르면 완료된다. DONE Hugo Directory 구조 설명 The following is a high-level overview of each of the directories with links to each of their respective sections within the Hugo docs.","title":"Hugo :: 정적 블로깅 방법"},{"content":" 출력해보기 String 다루는 방법에 대해서 설명하라, 2가지 함수 string \u0026lt;-\u0026gt; int join-string regex memq progn org-add-link-type sort-lines Emacs Lisp Functions buffer display-buffer display-buffer-at-buttom display-buffer-no-window Overriding the default placement actions display-buffer-alist emacs-lisp으로 이것저것 {{c1::dfasdfasdlfij}} 출력해보기 M-x ielm\n(message \u0026#34;하이 %d\u0026#34; (+ 2 3)) #\u0026#39;(1 2 3) (cons 1 \u0026#39;(2 3 4)) ;; (1 2 3 4) (let ((a 2) (b 3)) (message \u0026#34;%s\u0026#34; (+ a b)) ) (let (a b) (setq a 2) (setq b 3) (message \u0026#34;%s\u0026#34; (+ a b)) ) ;; (message a) // let은 local variable ;; (let ((a 2) (b 3) (c (+ a b)))) // error 심볼은 각각 평가 되므로 초기화 단계에서 서로 참조 불가 (let* ((a 2) (b 2) (c (+ a b))) (message \u0026#34;%s\u0026#34; (+ a b c)) ) String 다루는 방법에 대해서 설명하라, 2가지 함수 (split-string \u0026#34;123123 123123 123123\u0026#34; \u0026#34; \u0026#34;) ;; (\u0026#34;123123\u0026#34; \u0026#34;123123\u0026#34; \u0026#34;123123\u0026#34; (concat \u0026#34;a\u0026#34; \u0026#34;b\u0026#34;) string \u0026lt;-\u0026gt; int join-string regex memq (memq 1 \u0026#39;(7 1 2 3)) (memq ELT LIST)로 정의 되어 있고, ELT가 LIST의 엘리먼트라면 non-nil을 반환한다. 반환되는 값은 LIST의 tail이고 그것의 car는 ELT이다.\nprogn org-add-link-type (require \u0026#39;org) (org-add-link-type \u0026#34;evernote\u0026#34; nil \u0026#39;(lambda (path desc frmt) (format \u0026#34;\u0026lt;a href=\\\u0026#34;evernote:%s\\\u0026#34;\u0026gt;%s\u0026lt;/a\u0026gt;\u0026#34; path desc))) sort-lines sort.el에서 임포트 되는 함수입니다. Emacs Lisp Functions buffer winner-mode perspective.el mode (current-buffer) display-buffer 어떤 버퍼를 어떤 창에서 실행 시키고 싶을 때 사용할 수 있는 함수이다. display-buffer\u0026ndash;maybe-pop-up-frame-or-window (display-buffer \u0026#34;scratch\u0026#34; \u0026#39;(display-buffer--maybe-same-window . ())) ; 만약 현재 buffer에 아래와 같은 이름의 버퍼가 있다면 새롭게 실행된다. (display-buffer \u0026#34;javascript.org\u0026#34; \u0026#39;(display-buffer--maybe-pop-up-frame-or-window . ())) display-buffer\u0026ndash;maybe-pop-up-frame is a compiled Lisp function in ‘window.el’. 이 함수는 window.el에서 컴파일 된 함수이다.\n(display-buffer\u0026ndash;maybe-pop-up-frame BUFFER ALIST)\nTry displaying BUFFER based on ‘pop-up-frames’. If ‘pop-up-frames’ is non-nil (and not ‘graphic-only’ on a text-only terminal), try with ‘display-buffer-pop-up-frame’.\nALIST is an association list of action symbols and values. See Info node ‘(elisp) Buffer Display Action Alists’ for details of such alists.\ndisplay-buffer-at-buttom 현재의 버퍼를 그대로 아래에 하나 더 만들어 준다. (display-buffer (current-buffer) \u0026#39;(display-buffer-at-bottom . () )) display-buffer-no-window Overriding the default placement actions (setq display-buffer-base-action \u0026#39;((display-buffer-reuse-window display-buffer-reuse-mode-window display-buffer-same-window display-buffer-in-previous-window) )) display-buffer-alist 현재\nemacs-lisp으로 이것저것 ; 항상 아래에 *Messages* Buffer를 생성한다. (display-buffer \u0026#34;*Messages*\u0026#34; \u0026#39;(display-buffer-in-side-window . ( (side . bottom) (slot . 1) (window-height . 5) ) ) ) (display-buffer \u0026#34;.scratch.org\u0026#34; \u0026#39;(display-buffer-in-side-window . ( (side . bottom) (window-height . 5) (slot . -0) ) ) ) {{c1::dfasdfasdlfij}} 이건 어때용?\n","permalink":"/post/emacs/emacs-lisp-%E1%84%8B%E1%85%B5%E1%84%92%E1%85%A2%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/","summary":"출력해보기 String 다루는 방법에 대해서 설명하라, 2가지 함수 string \u0026lt;-\u0026gt; int join-string regex memq progn org-add-link-type sort-lines Emacs Lisp Functions buffer display-buffer display-buffer-at-buttom display-buffer-no-window Overriding the default placement actions display-buffer-alist emacs-lisp으로 이것저것 {{c1::dfasdfasdlfij}} 출력해보기 M-x ielm\n(message \u0026#34;하이 %d\u0026#34; (+ 2 3)) #\u0026#39;(1 2 3) (cons 1 \u0026#39;(2 3 4)) ;; (1 2 3 4) (let ((a 2) (b 3)) (message \u0026#34;%s\u0026#34; (+ a b)) ) (let (a b) (setq a 2) (setq b 3) (message \u0026#34;%s\u0026#34; (+ a b)) ) ;; (message a) // let은 local variable ;; (let ((a 2) (b 3) (c (+ a b)))) // error 심볼은 각각 평가 되므로 초기화 단계에서 서로 참조 불가 (let* ((a 2) (b 2) (c (+ a b))) (message \u0026#34;%s\u0026#34; (+ a b c)) ) String 다루는 방법에 대해서 설명하라, 2가지 함수 (split-string \u0026#34;123123 123123 123123\u0026#34; \u0026#34; \u0026#34;) ;; (\u0026#34;123123\u0026#34; \u0026#34;123123\u0026#34; \u0026#34;123123\u0026#34; (concat \u0026#34;a\u0026#34; \u0026#34;b\u0026#34;) string \u0026lt;-\u0026gt; int join-string regex memq (memq 1 \u0026#39;(7 1 2 3)) (memq ELT LIST)로 정의 되어 있고, ELT가 LIST의 엘리먼트라면 non-nil을 반환한다.","title":"Emacs Lisp 이해하기"},{"content":"환경 설정 brew install clojure/tools/clojure ","permalink":"/post/clojure/clojure_dev_env/","summary":"환경 설정 brew install clojure/tools/clojure ","title":"clojure :: 환경 설정"},{"content":" literal이란 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는 표기법이다. {}로 0개 이상의 property를 선어하면 변수 할당 시점에 객체리터럴을 해석해 객체를 할당한다. 객체 리터럴은 expression이므로 \u0026lt;;\u0026gt;가 필요하다. block과는 다르다. var person = { name: \u0026#39;LEE\u0026#39;, age: 20 } \u0026lt;name: \u0026lsquo;LEE\u0026rsquo;\u0026gt;, \u0026lt;age: 20\u0026gt;를 프로퍼티라 부른다. name은 property의 키, \u0026lsquo;LEE\u0026rsquo;는 프로퍼티의 값이다. Property key에 문자열이나 심벌이외의 값 =\u0026gt; 문자열로 변환 Access dot notation bracket notation 키가 숫자로 이루어진 문자열의 경우 따옴표를 생략해도 암시적으로 변환된다. varl person = { name: \u0026#39;lee\u0026#39; 1: 2 }; console.log(person.name); // dot 표기법 console.log(person[\u0026#39;name\u0026#39;]); // bracket 표기법 console.log(person[1]) =\u0026gt; console.log(person[\u0026#39;1\u0026#39;]) // 암시적으로 변환된다. 값 갱신 person.name = \u0026rsquo;lee\u0026rsquo; Property 동적 생성 persons.name2 = \u0026rsquo;lee\u0026rsquo; Property 삭제 delete person.name2 property의 key가 존재하지 않더라도 Error가 발생하지 않는다. ES6에 추가된 객체 리터럴 확장기능 프로퍼티 축약표현 변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략할 수 있다. var x = 1, y = 2 var obj = { x: x, y: y } // {x:1, y:2} var obj = {x, y}; // 위와 같이 선언해도 동일하다. 계산된 프로퍼티 이름 var i = 0; var prefix = \u0026#34;prefix\u0026#34; var obj = {}; obj[prefix + \u0026#39;-\u0026#39; + ++i ] = i; obj[prefix + \u0026#39;-\u0026#39; + ++i ] = i; obj[prefix + \u0026#39;-\u0026#39; + ++i ] = i; obj[prefix + \u0026#39;-\u0026#39; + ++i ] = i; // const obj = { [`${prefix}-${++i}`] : i, [`${prefix}-${++i}`] : i, [`${prefix}-${++i}`] : i, } 메서드 축약 표현 // ES5 var obj = { name: \u0026#39;Lee\u0026#39;, sayHi: function() { console.log(\u0026#34;HI\u0026#34; + this.name) } } // ES6 var obj = { name: \u0026#39;Lee\u0026#39;, // method 축표현 sayHi(){ console.log(\u0026#34;HI\u0026#34; + this.name) } } ","permalink":"/post/javascript/object_liternal/","summary":"literal이란 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는 표기법이다. {}로 0개 이상의 property를 선어하면 변수 할당 시점에 객체리터럴을 해석해 객체를 할당한다. 객체 리터럴은 expression이므로 \u0026lt;;\u0026gt;가 필요하다. block과는 다르다. var person = { name: \u0026#39;LEE\u0026#39;, age: 20 } \u0026lt;name: \u0026lsquo;LEE\u0026rsquo;\u0026gt;, \u0026lt;age: 20\u0026gt;를 프로퍼티라 부른다. name은 property의 키, \u0026lsquo;LEE\u0026rsquo;는 프로퍼티의 값이다. Property key에 문자열이나 심벌이외의 값 =\u0026gt; 문자열로 변환 Access dot notation bracket notation 키가 숫자로 이루어진 문자열의 경우 따옴표를 생략해도 암시적으로 변환된다.","title":"javascript의 object literal"},{"content":"zettelkasten 개념적인 내용들만 기록한다. 프로젝트성이나 아직까지 개념화되지 않는 내용들은 project에 작성하고 주기적으로 옮겨준다. note taking process \u0026lt;2021-07-30 Fri\u0026gt; 챕터를 읽고 이해한 내용을 손으로 우선 써본다. 떠오르는 생각들이 있으면 함께 메모해서 적어둔다. Reference Note 작성이 끝나면 다음으로는 영구노트 작성으로 넘어간다. 내가 잘 아는 내용들은 상관 없지만 모르는 내용들은 이 Reference Note를 종이로 작성하는게 더 좋다. 왜냐면 마치 설명하듯이 작성하게 되는 이점이 있으니까.\n내가 쓰는 도구들 볼펜 볼트액션 볼펜 현재는 tactile turn에서 나오는 티타늄 볼트액션 볼펜을 이용하고 있다. 국내구매는 네이버쇼핑에서\u0026hellip; 호환 되는 리필심은 다음과 같다 https://tactileturn.com/pages/ink-refills\nFixsion 볼펜 지워지는 볼펜이라 아주 좋음\n만년필 A4 용지로 바인더 만들기, 양식 출력 방법 A4용지는 5mm grid를 출력해서 사용한다. 좌측 1cm는 binder 구멍을 위해서 파둔다.\n2021년 현재 brother DCP T710W를 사용한다.\nnumbering 툴 ANS-80 현대오피스 금속용 넘버링 잉크 \u0026lt;2022-11-23 Wed\u0026gt;의미가 없다고 판단해서 현재는 사용하지 않는다. a4 용지 밀크 포토 용지 네이버 스토어 A4/A5 둘다 팜 보관방법 킹짐의 30공 노트 300권자리 바인더를 사용해서 보관한다. 네이버 구매 링크 Brother에서 양면 인쇄하는 방법 바인더노트용 표지 사용하기 제본표지 인덱스 제본용 PP PVC A4 A5 B5 투명 4칼라 : 만능 가게 양면 합쳐서 800원 정도에 구매할 수 있다. 제본노트 타블렛 사이즈 노트 13X21CM 사이즈 노트 복면사과 까르네 타블렛 사이즈 몰스킨 까이에 라지 솔루션북\nNaver 솔루션북 스마트 스토어 고쿠요 A5 노트 A6 백상지 A6 백색 모조지 180g 백상지 A7 백상지 A6 백색 모조지 180g 백상지 특정 주제의 글을 모아서 관리하는 방법 Numbers로 주식 차트를 관리한다. 해당 노트 넘버를 통해서 PermanentNote에 접속한다. 영구노트를 작성한던 어떤 노트를 작성하던 반드시 index 폴더를 두고 반추할 수 있도록 한다. 주제가 있는 노트와 주재가 없는 노트들이 있다. 노트는 보고 바로 행동할 수 있을 정도로 작성해야 한다. ","permalink":"/post/etc/note_taking_rules/","summary":"zettelkasten 개념적인 내용들만 기록한다. 프로젝트성이나 아직까지 개념화되지 않는 내용들은 project에 작성하고 주기적으로 옮겨준다. note taking process \u0026lt;2021-07-30 Fri\u0026gt; 챕터를 읽고 이해한 내용을 손으로 우선 써본다. 떠오르는 생각들이 있으면 함께 메모해서 적어둔다. Reference Note 작성이 끝나면 다음으로는 영구노트 작성으로 넘어간다. 내가 잘 아는 내용들은 상관 없지만 모르는 내용들은 이 Reference Note를 종이로 작성하는게 더 좋다. 왜냐면 마치 설명하듯이 작성하게 되는 이점이 있으니까.\n내가 쓰는 도구들 볼펜 볼트액션 볼펜 현재는 tactile turn에서 나오는 티타늄 볼트액션 볼펜을 이용하고 있다.","title":"연구 체계 및 방법론"},{"content":"subtype이란 무엇인가? F가 G의 서브타입이라면 G가 쓰일 자리에 F가 쓰여도 된다.\nIn programming language theory, subtyping (also subtype polymorphism or inclusion polymorphism) is a form of type polymorphism in which a subtype is a datatype that is related to another datatype (the supertype) by some notion of substitutability, meaning that program elements, typically subroutines or functions, written to operate on elements of the supertype can also operate on elements of the subtype. 프로그래밍 이론에서 subtyping(subtype polymorphism, inclusion polymorphism이라고 불리는) 은 타입다형성의 한 형태이다. 상위타입으로 작성된 서브루틴이나 함수들이 하위타입을 대입해도 동일하게 하는 것을 서브타입이라고 부른다. 그냥 하나의 타입만 있을 때가 아닌 kind를 다룰 때 이 서브타입에 어떤 규칙들을 지켜야 하는지\nhttps://softwareengineering.stackexchange.com/questions/255878/correct-terminology-in-type-theory-types-type-constructors-kinds-sorts-and-va\n값(value) 타입(type) 종류(kinds) 타입생성자 타입파라미터 covariant, countra-variant https://typelevel.org/blog/2016/02/04/variance-and-functors.html\n우리가 Generic을 만들 때 다음과 같은 개념들을 사용한다. T\u0026rsquo;이 T의 서브타입일 때 다음과 같이 정의된다.\n키워드 의미 표기 covariant F[T\u0026rsquo;] 는 F[T]의 서브타입이다 [+T] countravariant F[T] 는 F[T\u0026rsquo;]의 서브타입이다. [-T] invariant F[T] 와 F[T\u0026rsquo;]는 어떠한 관계도 없다 [T] 변성과 반변성의 개념에 대해서 이해해보자.\n함수의 인자는 반공변적이고 리턴타입은 공변적이어야 한다 . https://stackoverflow.com/questions/41098105/subtyping-between-function-types\n","permalink":"/post/emacs/pis-19-typeparameter/","summary":"subtype이란 무엇인가? F가 G의 서브타입이라면 G가 쓰일 자리에 F가 쓰여도 된다.\nIn programming language theory, subtyping (also subtype polymorphism or inclusion polymorphism) is a form of type polymorphism in which a subtype is a datatype that is related to another datatype (the supertype) by some notion of substitutability, meaning that program elements, typically subroutines or functions, written to operate on elements of the supertype can also operate on elements of the subtype.","title":"19장 타입파라미터"},{"content":"pyenv 설치 brew install pyenv virtualenv 사용하기 가상환경 생성하기 virtualenv {환경이름} 위의 경로를 생성하면 환경이름으로 된 폴더가 만들어짐 $ virtualenv venv 활성화 시키기 source {환경이름}/bin/activate를 입력하면 shell의 모양이 다음과 같이 바뀜\n(환경이름) $ 내가 사용하는 모듈을 저장하기 pip freeze \u0026gt; requirements.txt\n내가 사용하는 모듈 설치하기 pip install -r requirements.txt\nvirtualEnvWrapper 설정하기 virutalenv만 사용하면 매번 source를 통해서 가상환경에 진입해야 한다.\npip install virtualenvwrapper # ~/.zsrc에 아래를 등록 export WORKON_HOME=~/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=\u0026#34;$(which python3)\u0026#34; # Usage of python3 source /Users/veritas/.pyenv/shims/virtualenvwrapper.sh ","permalink":"/post/python/python-environment/","summary":"pyenv 설치 brew install pyenv virtualenv 사용하기 가상환경 생성하기 virtualenv {환경이름} 위의 경로를 생성하면 환경이름으로 된 폴더가 만들어짐 $ virtualenv venv 활성화 시키기 source {환경이름}/bin/activate를 입력하면 shell의 모양이 다음과 같이 바뀜\n(환경이름) $ 내가 사용하는 모듈을 저장하기 pip freeze \u0026gt; requirements.txt\n내가 사용하는 모듈 설치하기 pip install -r requirements.txt\nvirtualEnvWrapper 설정하기 virutalenv만 사용하면 매번 source를 통해서 가상환경에 진입해야 한다.\npip install virtualenvwrapper # ~/.zsrc에 아래를 등록 export WORKON_HOME=~/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=\u0026#34;$(which python3)\u0026#34; # Usage of python3 source /Users/veritas/.","title":"python virtualenv 환경정리"},{"content":" Index\nRelated:\nemacs main inbox emacs-my-package emacs-lisp-배워보기 emacs-documentation emacs-yasnippet Snippet collections can be stored in plain text files. They are arranged by sub-directories naming snippet tables. These mostly name Emacs major mode names. 기본적으로 Emacs major Mode의 네임으로 subdir을 만들어서 관리한다.\nTriggering Expansion link\nwhen yas-minor-mode is active 일 때 triggering key를 누르면 확장 된다.\nWritting Snippet emacs-my-package 내가 사용하는 package를 모아서 정리\norgmode tide hydra company-mode yasnippet auto-complete hook 개념 이해하기 Code Formatting 코드 포맷을 하기 위해서 다음과 같은 것을 할 수 있을 것 같다.\n편집 스타일 바닐라 이맥스\nevil mode\ncompasable.el\nemacs my configuration 이맥스를 자주 사용하는데 설정을 어떻게 바꿨는지 무슨 기능들이 있었는지 잘 모르겠어서 여기에 히스토리를 정리해놓으려고 한다. 이렇게 하면 앞으로 잘 쓸 수 있지 않을까?\norgmode orgmode 설명 keybind org-narrow-subtree C-x n n 내가 원하는 글 쓰는 장소로 집중할 수 있다. org-next-visible-heading C-c C-n 다음 heading으로 이동 org-forward-heading-same-level C-c C-f 글 쓰는 도중에 사용하면 해당헤드로 이동 가능 org-backward-heading-same-level C-c C-b 글 쓰는 도중에 사용하면 해당 헤드로 이동 가능 org-clock-report C-c C-x C-r org-clock-in C-c C-x C-i org-clock-out C-c C-x C-o orgmode code navigation 설명 keybind jump into definition M-, Move back to defitnion M-. 해당 코드에서 바인드된것들 요약해서 캡쳐하기 file navigation 설명 keybind treemacs-toggle C-x t t treemacs toggle next-navigation n next previous-navigation p previous edit-work-space C-c C-w e workspace edit switch-work-space C-c C-w s switch work space open no split o o open no split open vertical split o v open vertical spli open-horizontally o h open horizontally create-file c f create-dir c d open-ace-? o a (a, h, v) 선택 해서 오픈하기 MacOS에서 org-protocol 사용하기 Platus라는 앱을 발견 emacs-documentation 14.22 Visual Line Mode Another alternative to ordinary line continuation is to use word wrap. Here, each long logical line is divided into two or more screen lines, like in ordinary line continuation. However, Emacs attempts to wrap the line at word boundaries near the right window edge. (If the line\u0026rsquo;s direction is right-to-left, it is wrapped at the left window edge instead.) This makes the text easier to read, as wrapping does not occur in the middle of words.\n일반적인 라인 이어짐(line continuation)에 대한 대한으로는 word wrap을 상요하는 것이다. 여기에 긴 논리적 라인이 2개 또는 더 많은 스크린의 줄에서\nWord wrap is enabled by Visual Line mode, an optional minor mode. To turn on Visual Line mode in the current buffer, type M-x visual-line-mode; repeating this command turns it off. You can also turn on Visual Line mode using the menu bar: in the Options menu, select the ‘Line Wrapping in this Buffer’ submenu, followed by the ‘Word Wrap (Visual Line mode)’ menu item. While Visual Line mode is enabled, the mode line shows the string ‘wrap’ in the mode display. The command M-x global-visual-line-mode toggles Visual Line mode in all buffers.\nIn Visual Line mode, some editing commands work on screen lines instead of logical lines: C-a (beginning-of-visual-line) moves to the beginning of the screen line, C-e (end-of-visual-line) moves to the end of the screen line, and C-k (kill-visual-line) kills text to the end of the screen line.\nTo move by logical lines, use the commands M-x next-logical-line and M-x previous-logical-line. These move point to the next logical line and the previous logical line respectively, regardless of whether Visual Line mode is enabled. If you use these commands frequently, it may be convenient to assign key bindings to them. See Init Rebinding.\nBy default, word-wrapped lines do not display fringe indicators. Visual Line mode is often used to edit files that contain many long logical lines, so having a fringe indicator for each wrapped line would be visually distracting. You can change this by customizing the variable visual-line-fringe-indicators\n","permalink":"/post/emacs/emacs/","summary":"Index\nRelated:\nemacs main inbox emacs-my-package emacs-lisp-배워보기 emacs-documentation emacs-yasnippet Snippet collections can be stored in plain text files. They are arranged by sub-directories naming snippet tables. These mostly name Emacs major mode names. 기본적으로 Emacs major Mode의 네임으로 subdir을 만들어서 관리한다.\nTriggering Expansion link\nwhen yas-minor-mode is active 일 때 triggering key를 누르면 확장 된다.\nWritting Snippet emacs-my-package 내가 사용하는 package를 모아서 정리\norgmode tide hydra company-mode yasnippet auto-complete hook 개념 이해하기 Code Formatting 코드 포맷을 하기 위해서 다음과 같은 것을 할 수 있을 것 같다.","title":"개인적으로 사용하는 emacs 설정 모음"},{"content":"Proxy, ProxyPattern, DecoratorPattern Decorator Pattern 다른 언어와의 차이점\n자바의 함수는 1급 객체가 아니다.\nExample1 Input Stream 자바에서 Decorator패턴을 구현하기 위해서는 결국 Proxy의 형태로 구현할 수 밖에 없다. 자바는 함수가 1급 객체가 아니기 때문이다.\nFigure 1: BufferedInputStream 예제\n핵심 기능과 부가기능을 분리하는 여러가지 방법들 ","permalink":"/post/java/toby-spring-chapter-6/","summary":"Proxy, ProxyPattern, DecoratorPattern Decorator Pattern 다른 언어와의 차이점\n자바의 함수는 1급 객체가 아니다.\nExample1 Input Stream 자바에서 Decorator패턴을 구현하기 위해서는 결국 Proxy의 형태로 구현할 수 밖에 없다. 자바는 함수가 1급 객체가 아니기 때문이다.\nFigure 1: BufferedInputStream 예제\n핵심 기능과 부가기능을 분리하는 여러가지 방법들 ","title":"6장 AOP"},{"content":" java-junit link 용어정리 JUnit 기본 단언문 특징 단언문 Hamcrest 대표적인 Matchers Index\nRelated:\njava-junit sitename test\nlink github-team-junit 용어정리 test context 테스트의 정의 반복적으로 수행되고 동일한 결과를 얻어야 함 테스트케이스에서 사용하는 인스턴스 파일이나 네트워크 등의 자원을 만들어서 지정 데이터베이스 연동 JUnit 기본 단언문 assertEqual: 두개의 값이 같은지 비교 assertSame: 두 개의 객체가 정말 동일한 객체인지 확인 assertTrue: 예상 값의 참 거짓을 판별 asserNull: 대상 값이 null이면 참이 됨 fail 특징 fixture @BeforeClass @AfterClass @Before @After 테스트 종류 시간 제한 테스트 @Test(timeout=1000) 테스트 무시 @Ignore 배열지원 @RunWith JUnit Test 클래스를 실행하기 위해서 Runner명시적으로 지정 @Suiteclasses(Class[]) 여러개의 테스트 클래스를 수행하기 위해서 쓰임 @RunWith(Suite.class)@SuiteClass(Class[]) @파라미터를 이용한 테스트 단언문 Hamcrest assertThat(테스트 대상, matcher 구문); assertThat(\u0026ldquo;메시지\u0026rdquo;,테스트대상, matcher 구문); assertEquals(100, accout.getBalance()) assertThat(account.getBalance(), is(equalTo(1000))); assertNotNull(resource.newConnection()); assertThat(resource.newConnection(), is(notNullValue()); assertTrue(account.getBalance() \u0026gt; 0); assertThat(account.getBalance(), isGreaterThan(0)); assertTrue(user.getLoginName().indexOf(\u0026#34;Guest\u0026#34;) \u0026gt; -1)); assertThat(user.getLoginName(), containsString(\u0026#34;Guest\u0026#34;)); is equalsTo greaterThan 대표적인 Matchers1 core anything describdedAs is object equalTo hasToString instanceOf, isCompatibleType notNullValue, nullValue sameInstance logical allOf anyOf not beans hasProperty collection number closedTo greaterThen, greaterThanOrEqualTo, lessThen, lessThenOrEqualTo text equalToIgnoringCase equalToIgnoringWhiteSpace containsString, endsWith, startsWith https://www.lesstif.com/pages/viewpage.action?pageId=18219426\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"/post/java/java-junit/","summary":"java-junit link 용어정리 JUnit 기본 단언문 특징 단언문 Hamcrest 대표적인 Matchers Index\nRelated:\njava-junit sitename test\nlink github-team-junit 용어정리 test context 테스트의 정의 반복적으로 수행되고 동일한 결과를 얻어야 함 테스트케이스에서 사용하는 인스턴스 파일이나 네트워크 등의 자원을 만들어서 지정 데이터베이스 연동 JUnit 기본 단언문 assertEqual: 두개의 값이 같은지 비교 assertSame: 두 개의 객체가 정말 동일한 객체인지 확인 assertTrue: 예상 값의 참 거짓을 판별 asserNull: 대상 값이 null이면 참이 됨 fail 특징 fixture @BeforeClass @AfterClass @Before @After 테스트 종류 시간 제한 테스트 @Test(timeout=1000) 테스트 무시 @Ignore 배열지원 @RunWith JUnit Test 클래스를 실행하기 위해서 Runner명시적으로 지정 @Suiteclasses(Class[]) 여러개의 테스트 클래스를 수행하기 위해서 쓰임 @RunWith(Suite.","title":"java-junit"},{"content":" 아래와 같이 설정해주면 inline 이미지에서 스크롤시 점프하지 않는다. ;; https://emacs.stackexchange.com/questions/10354/smooth-mouse-scroll-for-inline-images (pixel-scroll-mode) (setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour. (setq pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels). (setq mouse-wheel-scroll-amount \u0026#39;(1)) ; Distance in pixel-resolution to scroll each mouse wheel event. (setq mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me. ","permalink":"/post/emacs/emacs-scroll-pixel/","summary":" 아래와 같이 설정해주면 inline 이미지에서 스크롤시 점프하지 않는다. ;; https://emacs.stackexchange.com/questions/10354/smooth-mouse-scroll-for-inline-images (pixel-scroll-mode) (setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour. (setq pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels). (setq mouse-wheel-scroll-amount \u0026#39;(1)) ; Distance in pixel-resolution to scroll each mouse wheel event. (setq mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me. ","title":"emacs 스크롤을 pixcel 단위로 변경하기"},{"content":"설치 brew install hugo 디렉토리 구조 만들기 hugo new site {blog_name} theme추가 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke git submodule add -b master https://github.com/karohani/karohani.github.com public google에서 사이트가 검색 되도록 하기 Google Search Console에 SiteMap등록 google webmaster 파일을 다운 받은 뒤에 static폴더 안에 넣고 검증 버튼을 누르면 완료된다. OX-hugo를 이용해서 실제 데이터와 바인딩하기 주의점 파일 이름이 한글이면 제대로 출력되지 않는다. TITLE은 한글로 하더라도 파일이름은 한글로 해서는 안된다 ㅠㅠ 젠장 ","permalink":"/post/essay/how-to-make-static-blog-by-using-hugo/","summary":"설치 brew install hugo 디렉토리 구조 만들기 hugo new site {blog_name} theme추가 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke git submodule add -b master https://github.com/karohani/karohani.github.com public google에서 사이트가 검색 되도록 하기 Google Search Console에 SiteMap등록 google webmaster 파일을 다운 받은 뒤에 static폴더 안에 넣고 검증 버튼을 누르면 완료된다. OX-hugo를 이용해서 실제 데이터와 바인딩하기 주의점 파일 이름이 한글이면 제대로 출력되지 않는다. TITLE은 한글로 하더라도 파일이름은 한글로 해서는 안된다 ㅠㅠ 젠장 ","title":"hugo를 사용한 정적 블로깅"},{"content":"Index 자바스크립트 이해하기 자바스크립트의 Closure 성질 이해하기 Closure는 왜 생기는 거지? 자바스크립트 배열 이해하기 index로 값 가져오기 var array = [1, 2, 3, 4]; array[2] // return 3 값 할당하는 방법 front 자바스크립트에서 배열에 값을 추가적으로 할당하거나 변경하라\nback var array = [1,2,3,4]; array[2] = \u0026#34;abcd\u0026#34; 길이 array.length를 통해서 배열의 길이를 얻을 수 있다.\n끝에 추가하기 array.push(10을 통해서 값을 획득할 수 있다. 반환값은 추가된 마지막 배열의 위치 index이다.\nvar array = [1, 2, 3, 4]; array.push(10) // return 5 // array의 맨뒤에 5가 추가되서 [1,2,3,4,5] 가 된다. 끝에 있는 값 지우기 var array = [1, 2, 3, 4]; array.pop(); // 4 // \u0026gt; array는 [1,2,3] 이 되고 리턴은 4가 된다. 앞에 추가하기 var array = [1,2,3,4]; array.unshift(10); // 새로운 길이인 5가 리턴된다. // array는 [10, 1, 2, 3, 4]가 된다. Item front\n자바스크립트의 배열에서 가장 앞에 값을 추가하라.\nback\nunshift(eliment)를 사용하면 값이 추가된다.\n앞에 있는 값 지우기 var array = [1,2,3,4]; array.shift() // return 지운값 // array는 [2,3,4]가 된다. Item front\n자바스크립트에서 배열 제일 앞에 있는 값을 지우는 함수는 무엇인가?\nback\nshift()를 사용하고 리턴은 지운값이 나오게 된다.\n배열 얇게 복사하기 slice(); 함수를 사용한다.\n항목 삭제 하기 var array = [1,2,3,4,5,6]; array.splice(2,3); // [3,4,5] array // [1,2,6] splice를 사용한다.\nItem front\n자바스크립트 배열에서 항목을 삭제하는 방법에 대해서 말하라.\nback\nsplice함수를 쓰면 Index, count를 입력해서 배열에서 값을 삭제할 수 있다.\nvar array = [1,2,3,4,5,6]; array.splice(2,3); // [3,4,5] array // [1,2,6] 위의 기본 함수들의 문제점 Argument로 받은 값들의 Reference를 통해서 값이 직접 수정되고 있다는 것 자체가 문제이기 때문에, 카피온 라이트의 형태로 모든 함수를 변경하는 것이 더 좋다.\n예를 들어서 shift와 같은 함수들은 다음과 같이 Copy On Write로 변경할 수 있다.\nfunction safty_shift(arr) { var copy = arr.slice(); copy.shift(); return copy; } Objects 훑어보기 var object = {a : 1, b: 2}; object[\u0026#34;a\u0026#34;] // 1 // Javascript token문법에 맞는다면 dot연산자를 사용해서 찾을 수 있다. https://ts39.es/ecma262/#sec-tokens object.a // 1 // 키로 값 설정하기 object.c = \u0026#34;c\u0026#34;; object[\u0026#34;c\u0026#34;] = \u0026#34;c\u0026#34;; // 삭제하기 del object[\u0026#34;c\u0026#34;]; // true or false // b객체의 모든 키 값을 a객체로 복사한다. Object.assign(a, b); // 새로운 객체를 만들고 싶다면 Object.assign({}, b); // 빈 객체에 B를 복사한다. // key목록 가져오기 Object.keys(object); // [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] Quiz front 자바스크립트의 객체에서 키로 값 찾는 방법, 키/값 쌍 지우는 방법, 객체 복사하는 방법, 키 목록 가져오는 방법을 말하라\nback [], dot 연산자, 할당은 [] 연산자만 가능, del로 지우는 것 가능, 반환값은 true/false, 값 복사는 Object.assign(target, origin)을 사용, 키 목록은 Object.keys()를 가져오면 된다.\nnpm-package @angular/cli와 같은 At(@)이 포함된 package 이름은 왜 그럴까? :PROPERTIES: :ID: D67E112A-3596-4853-900D-686F5ED05836 :EXPORT_FILE_NAME: what-is-js-package-at.md :EXPORT_DATE: 2022-12-03 :ENDin:\nWhen you sign up for an npm user account or create an Org, you are granted a scope that matches your user or Org name. You can use this scope as a namespace for related packages. A scope allows you to create a package with the same name as a package created by another user or Org without conflict.\n당신이 NPM user 계정을 만들거나, org를 만들면 사용자 또는 org이름과 일치된 scope가 제공된다. 이 scope를 패키지의 네임스페이스로 활용할 수 있다. Scope를 사용하면 충돌 없이 다른 사용자 또는 조직에서 만든 패키지와 동일한 이름의 패키지를 만들 수 있다.\n대충 인증된 organization을 말하는거구나.\nstackoverflow ","permalink":"/post/javascript/javascript/","summary":"Index 자바스크립트 이해하기 자바스크립트의 Closure 성질 이해하기 Closure는 왜 생기는 거지? 자바스크립트 배열 이해하기 index로 값 가져오기 var array = [1, 2, 3, 4]; array[2] // return 3 값 할당하는 방법 front 자바스크립트에서 배열에 값을 추가적으로 할당하거나 변경하라\nback var array = [1,2,3,4]; array[2] = \u0026#34;abcd\u0026#34; 길이 array.length를 통해서 배열의 길이를 얻을 수 있다.\n끝에 추가하기 array.push(10을 통해서 값을 획득할 수 있다. 반환값은 추가된 마지막 배열의 위치 index이다.\nvar array = [1, 2, 3, 4]; array.","title":"Javascript"},{"content":"MySQL to_base64 함수는 개행을 추가한다. 아래의 동작을 기본으로 하기 때문에 주의! JSON String을 암호화 하고 복호화 할 때 이슈가 발생한다. https://dev.mysql.com/doc/refman/8.0/en/string-functions.html\n","permalink":"/post/mysql/mysql_troubleshooting/","summary":"MySQL to_base64 함수는 개행을 추가한다. 아래의 동작을 기본으로 하기 때문에 주의! JSON String을 암호화 하고 복호화 할 때 이슈가 발생한다. https://dev.mysql.com/doc/refman/8.0/en/string-functions.html","title":"mysql-troubleshooting"},{"content":"생각을 기록하면 이렇게 된다 최고의 모드는 orgmode이다.\n하지만 최대한 다른 모드와 기능들은 배제하고 내가 직접 작성한 것들만 사용하고 싶다. 그러면 역시 orgmode와 이것을 조합한게 최고인듯? \u0026lt;201022-1143-zettelkasten.org\u0026gt;\n핵심 원리 언제든지 찾을 수 있는 unique-id system backlink를 통한 생각의 정리와 조합 카드에는 하나의 아이디어만 있어야 함 (원자성) 각각의 카드를 다른 아이디어와 링크시키기 Reference 뉴스 기사 dpitt.me Using Emacs\u0026rsquo;s org-mode As Your Zettelkasten Org-mode Workflow Part 3: Zettelkasten with Org-mode · Jethro Kuan ","permalink":"/post/essay/201022-1143-zettelkasten/","summary":"생각을 기록하면 이렇게 된다 최고의 모드는 orgmode이다.\n하지만 최대한 다른 모드와 기능들은 배제하고 내가 직접 작성한 것들만 사용하고 싶다. 그러면 역시 orgmode와 이것을 조합한게 최고인듯? \u0026lt;201022-1143-zettelkasten.org\u0026gt;\n핵심 원리 언제든지 찾을 수 있는 unique-id system backlink를 통한 생각의 정리와 조합 카드에는 하나의 아이디어만 있어야 함 (원자성) 각각의 카드를 다른 아이디어와 링크시키기 Reference 뉴스 기사 dpitt.me Using Emacs\u0026rsquo;s org-mode As Your Zettelkasten Org-mode Workflow Part 3: Zettelkasten with Org-mode · Jethro Kuan ","title":"Zettelkasten(상자방법)을 이용한 효과적인 공부방법"},{"content":"엔지니어는 실패를 막는 사람이다. [2021-07-24 Sat 21:17] https://www.youtube.com/watch?v=fHyTA-UIcqs\n","permalink":"/post/etc/20210724211747-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EA%B0%96%EC%B6%94%EC%96%B4%EC%95%BC-%ED%95%A0-9%EA%B0%80%EC%A7%80-%EA%B8%B0%EC%88%A0%EC%97%90%EC%84%9C.../","summary":"엔지니어는 실패를 막는 사람이다. [2021-07-24 Sat 21:17] https://www.youtube.com/watch?v=fHyTA-UIcqs","title":"개발자가 갖추어야 할 9가지 기술 - 박종천 넥슨 부본부장"},{"content":"엔지니어링의 깊은 곳 [2021-08-11 Wed 21:45]\n추상화라는 것은 대상의 가지고 있는 것중에 일부분만 투영하는 것\n협력과 계약\n대부분의 코드는 다른 코드와 협력 협력에 필요한 것은 어떻게가 아니라 무엇이다. 누가 담당해서 어떤 과정을 통해서 처리하는 것은 우리에게 중요한 문제가 아니다. 인터페이스 무엇을 표현한다. 협력하는 코드사이의 계약 추상화의 결과이다. 우리는 인터페이스를 대상으로 프로그래밍을 한다. 내용을 고려하지 않는다. print가 어떤 과정을 통해서 이루어지는지는 고려사항이 아니다.\n","permalink":"/post/lecture-note/20210811214554-%ED%98%84%EC%8B%A4%EC%84%B8%EC%83%81%EC%9D%98-tdd-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EA%B9%8A%EC%9D%80%EA%B3%B3-%EC%9D%B4%EA%B7%9C%EC%9B%90/","summary":"엔지니어링의 깊은 곳 [2021-08-11 Wed 21:45]\n추상화라는 것은 대상의 가지고 있는 것중에 일부분만 투영하는 것\n협력과 계약\n대부분의 코드는 다른 코드와 협력 협력에 필요한 것은 어떻게가 아니라 무엇이다. 누가 담당해서 어떤 과정을 통해서 처리하는 것은 우리에게 중요한 문제가 아니다. 인터페이스 무엇을 표현한다. 협력하는 코드사이의 계약 추상화의 결과이다. 우리는 인터페이스를 대상으로 프로그래밍을 한다. 내용을 고려하지 않는다. print가 어떤 과정을 통해서 이루어지는지는 고려사항이 아니다.","title":"이규원 현실 세상의 TDD 후기"},{"content":"책장 정리 방법1 기계인간님의 정리 방법을 참고로 했다. 3 3 3 1 - 1 1 - 2 MRU - 3 - 3 버릴책 어딘가에서 꺼내서 읽은 책은 MRU 제일 왼쪽에 꽂는다. MRU가 다 차면 이동한다. 다시 사용할 것 같은 책은 2로 이동한다(주로 글쓰기) 버릴 책의 공간이 전부 차면 \u0026ldquo;중고\u0026quot;로 판매하던 없앤다. 1영역은 아직 읽지 않은 책들을 넣어둔다. 다 읽은 책은 아래에서 또는 위에서 찾으면 된다. 안 읽은 책은 [1]을 찾으면 된다. 책 인덱싱 하는 방법 책 어딘가를 찾아 봤다면 포스트잇 플래그에 날짜를 붙여둔다. 자잘한 소도구들 관리방법 매번 박스를 사서 관리하는 것은 어렵다\n박스에 들어가지 않는 작은 케이블들과 물건들은 어떻게 관리하나?\n위에 태그를 붙인 지퍼팩을 활용한다.\n최근에 활용했다면 최근 박스의 가장 앞에 둔다.\n박스가 다 차면 tag에 붙어 있는 날짜를 기준으로 정렬하는 창고로 이동한다.\n창고는 주기적으로 정리한다.\n창고가 다 차면 가장 오래된 것부터 절반을 폐기한다.\n: https://johngrib.github.io/wiki/my-bookshelf/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"/post/life_hacking/%EC%A0%95%EB%A6%AC_%EB%B0%A9%EB%B2%95/","summary":"책장 정리 방법1 기계인간님의 정리 방법을 참고로 했다. 3 3 3 1 - 1 1 - 2 MRU - 3 - 3 버릴책 어딘가에서 꺼내서 읽은 책은 MRU 제일 왼쪽에 꽂는다. MRU가 다 차면 이동한다. 다시 사용할 것 같은 책은 2로 이동한다(주로 글쓰기) 버릴 책의 공간이 전부 차면 \u0026ldquo;중고\u0026quot;로 판매하던 없앤다. 1영역은 아직 읽지 않은 책들을 넣어둔다. 다 읽은 책은 아래에서 또는 위에서 찾으면 된다. 안 읽은 책은 [1]을 찾으면 된다.","title":"정리 방법"}]